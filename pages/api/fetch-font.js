export const runtime = "edge"
export default async function handler(req) {
  if (req.method !== "POST") {
    return new Response(JSON.stringify({ error: "Method not allowed" }), {
      status: 405,
      headers: { "Content-Type": "application/json" },
    })
  }
  const { input } = await req.json()
  if (!input) {
    return new Response(JSON.stringify({ error: "Missing parameters" }), {
      status: 400,
      headers: { "Content-Type": "application/json" },
    })
  }
  try {
    const data = fetchFontsAPI(input)
    return new Response(JSON.stringify(data), {
      status: 200,
      headers: { "Content-Type": "application/json" },
    })
  } catch (error) {
    console.error("Error fetching fonts APIs:", error)
    return new Response(JSON.stringify({ error: "Internal Server Error" }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    })
  }
}

function fetchFontsAPI(text) {
  const circleText = convertToEmptyCircle(text)
  const filledCircle = convertToFilledCircle(text)
  const mathBold = convertToMathBold(text)
  const mathBoldFraktur = convertToMathBoldFraktur(text)
  const mathFraktur = convertToMathFraktur(text)
  const mathBoldItalic = convertToMathBoldItalic(text)
  const mathBoldScript = convertToMathBoldScript(text)
  const mathDoubleStruck = convertToMathDoubleStruck(text)
  const mathSans = convertToMathSans(text)
  const mathSansBold = convertToMathSansBold(text)
  const mathSansBoldItalic = convertToMathSansBoldItalic(text)
  const mathSansItalic = convertToMathSansItalic(text)
  const mathScript = convertToMathScript(text)
  const parenthesized = convertToParenthesized(text)
  const regionalIndicator = convertToRegionalIndicator(text)
  const square = convertToSquare(text)
  const filledSquare = convertToFilledSquare(text)
  const aCutePseudoAlphabet = convertToACutePseudoAlphabet(text)
  const cjkThaiPseudoAlphabet = convertToCJKThaiPseudoAlphabet(text)
  const curvy1PseudoAlphabet = convertToCurvy1PseudoAlphabet(text)
  const curvy2PseudoAlphabet = convertToCurvy2PseudoAlphabet(text)
  const curvy3PseudoAlphabet = convertToCurvy3PseudoAlphabet(text)
  const fauxCyrillicPseudoAlphabet = convertToFauxCyrillicPseudoAlphabet(text)
  const fauxEthiopicPseudoAlphabet = convertToFauxEthiopicPseudoAlphabet(text)
  const rockDotsPseudoAlphabet = convertToRockDotsPseudoAlphabet(text)
  const smallCapsPseudoAlphabet = convertToSmallCapsPseudoAlphabet(text)
  const strokedPseudoAlphabet = convertToStrokedPseudoAlphabet(text)
  const subscriptPseudoAlphabet = convertToSubscriptPseudoAlphabet(text)
  const superscriptPseudoAlphabet = convertToSuperscriptPseudoAlphabet(text)
  const invertedPseudoAlphabet = convertToInvertedPseudoAlphabet(text)
  const reversedPseudoAlphabet = convertToReversedPseudoAlphabet(text)

  // Create the object with the converted values
  const convertedObject = {
    Circled: circleText,
    "Filled Circle": filledCircle,
    "Math Bold": mathBold,
    "Math Bold Fraktur": mathBoldFraktur,
    "Math Fraktur": mathFraktur,
    "Math Bold Italic": mathBoldItalic,
    "Math Bold Script": mathBoldScript,
    "Math Double Struck": mathDoubleStruck,
    "Math Sans": mathSans,
    "Math Sans Bold": mathSansBold,
    "Math Sans Bold Italic": mathSansBoldItalic,
    "Math Sans Italic": mathSansItalic,
    "Math Script": mathScript,
    Parenthesized: parenthesized,
    "Regional Indicator": regionalIndicator,
    Square: square,
    "Filled Square": filledSquare,
    "A-cute Pseudo Alphabet": aCutePseudoAlphabet,
    "CJK+Thai Pseudo Alphabet": cjkThaiPseudoAlphabet,
    "Curvy 1 Pseudo Alphabet": curvy1PseudoAlphabet,
    "Curvy 2 Pseudo Alphabet": curvy2PseudoAlphabet,
    "Curvy 3 Pseudo Alphabet": curvy3PseudoAlphabet,
    "Faux Cyrillic Pseudo Alphabet": fauxCyrillicPseudoAlphabet,
    "Faux Ethiopic Pseudo Alphabet": fauxEthiopicPseudoAlphabet,
    "Rock Dots Pseudo Alphabet": rockDotsPseudoAlphabet,
    "Small Caps Pseudo Alphabet": smallCapsPseudoAlphabet,
    "Stroked Pseudo Alphabet": strokedPseudoAlphabet,
    "Subscript Pseudo Alphabet": subscriptPseudoAlphabet,
    "Superscript Pseudo Alphabet": superscriptPseudoAlphabet,
    "Inverted Pseudo Alphabet": invertedPseudoAlphabet,
    "Reversed Pseudo Alphabet": reversedPseudoAlphabet,
  }

  // Return the object to the frontend
  return convertedObject
}

// convert to empty circle font
function convertToEmptyCircle(text) {
  let mappings = {
    a: "‚ìê",
    b: "‚ìë",
    c: "‚ìí",
    d: "‚ìì",
    e: "‚ìî",
    f: "‚ìï",
    g: "‚ìñ",
    h: "‚ìó",
    i: "‚ìò",
    j: "‚ìô",
    k: "‚ìö",
    l: "‚ìõ",
    m: "‚ìú",
    n: "‚ìù",
    o: "‚ìû",
    p: "‚ìü",
    q: "‚ì†",
    r: "‚ì°",
    s: "‚ì¢",
    t: "‚ì£",
    u: "‚ì§",
    v: "‚ì•",
    w: "‚ì¶",
    x: "‚ìß",
    y: "‚ì®",
    z: "‚ì©",
    A: "‚í∂",
    B: "‚í∑",
    C: "‚í∏",
    D: "‚íπ",
    E: "‚í∫",
    F: "‚íª",
    G: "‚íº",
    H: "‚íΩ",
    I: "‚íæ",
    J: "‚íø",
    K: "‚ìÄ",
    L: "‚ìÅ",
    M: "‚ìÇ",
    N: "‚ìÉ",
    O: "‚ìÑ",
    P: "‚ìÖ",
    Q: "‚ìÜ",
    R: "‚ìá",
    S: "‚ìà",
    T: "‚ìâ",
    U: "‚ìä",
    V: "‚ìã",
    W: "‚ìå",
    X: "‚ìç",
    Y: "‚ìé",
    Z: "‚ìè",
    0: "‚ì™",
    1: "‚ë†",
    2: "‚ë°",
    3: "‚ë¢",
    4: "‚ë£",
    5: "‚ë§",
    6: "‚ë•",
    7: "‚ë¶",
    8: "‚ëß",
    9: "‚ë®",
    "+": "‚äï",
    "-": "‚äñ",
    "*": "‚äõ",
    "/": "‚äò",
    "=": "‚äú",
  }

  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    const char = text[i]
    if (mappings.hasOwnProperty(char)) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }
  return convertedText
}

// convert to filled circle
function convertToFilledCircle(text) {
  let mappings = {
    a: "üÖê",
    b: "üÖë",
    c: "üÖí",
    d: "üÖì",
    e: "üÖî",
    f: "üÖï",
    g: "üÖñ",
    h: "üÖó",
    i: "üÖò",
    j: "üÖô",
    k: "üÖö",
    l: "üÖõ",
    m: "üÖú",
    n: "üÖù",
    o: "üÖû",
    p: "üÖü",
    q: "üÖ†",
    r: "üÖ°",
    s: "üÖ¢",
    t: "üÖ£",
    u: "üÖ§",
    v: "üÖ•",
    w: "üÖ¶",
    x: "üÖß",
    y: "üÖ®",
    z: "üÖ©",
    A: "üÖê",
    B: "üÖë",
    C: "üÖí",
    D: "üÖì",
    E: "üÖî",
    F: "üÖï",
    G: "üÖñ",
    H: "üÖó",
    I: "üÖò",
    J: "üÖô",
    K: "üÖö",
    L: "üÖõ",
    M: "üÖú",
    N: "üÖù",
    O: "üÖû",
    P: "üÖü",
    Q: "üÖ†",
    R: "üÖ°",
    S: "üÖ¢",
    T: "üÖ£",
    U: "üÖ§",
    V: "üÖ•",
    W: "üÖ¶",
    X: "üÖß",
    Y: "üÖ®",
    Z: "üÖ©",
    0: "‚ìø",
    1: "‚ë†",
    2: "‚ë°",
    3: "‚ë¢",
    4: "‚ë£",
    5: "‚ë§",
    6: "‚ë•",
    7: "‚ë¶",
    8: "‚ëß",
    9: "‚ë®",
    "+": "‚äï",
    "-": "‚äñ",
    "*": "‚äõ",
    "/": "‚äò",
    "=": "‚äú",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    const character = text[i]
    convertedText += character in mappings ? mappings[character] : character
  }
  return convertedText
}

// convert to mathbold
function convertToMathBold(text) {
  let mappings = {
    a: "ùêö",
    b: "ùêõ",
    c: "ùêú",
    d: "ùêù",
    e: "ùêû",
    f: "ùêü",
    g: "ùê†",
    h: "ùê°",
    i: "ùê¢",
    j: "ùê£",
    k: "ùê§",
    l: "ùê•",
    m: "ùê¶",
    n: "ùêß",
    o: "ùê®",
    p: "ùê©",
    q: "ùê™",
    r: "ùê´",
    s: "ùê¨",
    t: "ùê≠",
    u: "ùêÆ",
    v: "ùêØ",
    w: "ùê∞",
    x: "ùê±",
    y: "ùê≤",
    z: "ùê≥",
    A: "ùêÄ",
    B: "ùêÅ",
    C: "ùêÇ",
    D: "ùêÉ",
    E: "ùêÑ",
    F: "ùêÖ",
    G: "ùêÜ",
    H: "ùêá",
    I: "ùêà",
    J: "ùêâ",
    K: "ùêä",
    L: "ùêã",
    M: "ùêå",
    N: "ùêç",
    O: "ùêé",
    P: "ùêè",
    Q: "ùêê",
    R: "ùêë",
    S: "ùêí",
    T: "ùêì",
    U: "ùêî",
    V: "ùêï",
    W: "ùêñ",
    X: "ùêó",
    Y: "ùêò",
    Z: "ùêô",
    0: "ùüé",
    1: "ùüè",
    2: "ùüê",
    3: "ùüë",
    4: "ùüí",
    5: "ùüì",
    6: "ùüî",
    7: "ùüï",
    8: "ùüñ",
    9: "ùüó",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }

  return convertedText
}

// convert to match bold
function convertToMathBoldFraktur(text) {
  let mappings = {
    a: "ùñÜ",
    b: "ùñá",
    c: "ùñà",
    d: "ùñâ",
    e: "ùñä",
    f: "ùñã",
    g: "ùñå",
    h: "ùñç",
    i: "ùñé",
    j: "ùñè",
    k: "ùñê",
    l: "ùñë",
    m: "ùñí",
    n: "ùñì",
    o: "ùñî",
    p: "ùñï",
    q: "ùññ",
    r: "ùñó",
    s: "ùñò",
    t: "ùñô",
    u: "ùñö",
    v: "ùñõ",
    w: "ùñú",
    x: "ùñù",
    y: "ùñû",
    z: "ùñü",
    A: "ùï¨",
    B: "ùï≠",
    C: "ùïÆ",
    D: "ùïØ",
    E: "ùï∞",
    F: "ùï±",
    G: "ùï≤",
    H: "ùï≥",
    I: "ùï¥",
    J: "ùïµ",
    K: "ùï∂",
    L: "ùï∑",
    M: "ùï∏",
    N: "ùïπ",
    O: "ùï∫",
    P: "ùïª",
    Q: "ùïº",
    R: "ùïΩ",
    S: "ùïæ",
    T: "ùïø",
    U: "ùñÄ",
    V: "ùñÅ",
    W: "ùñÇ",
    X: "ùñÉ",
    Y: "ùñÑ",
    Z: "ùñÖ",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }

  return convertedText
}

// convert to
function convertToMathFraktur(text) {
  let mappings = {
    a: "ùîû",
    b: "ùîü",
    c: "ùî†",
    d: "ùî°",
    e: "ùî¢",
    f: "ùî£",
    g: "ùî§",
    h: "ùî•",
    i: "ùî¶",
    j: "ùîß",
    k: "ùî®",
    l: "ùî©",
    m: "ùî™",
    n: "ùî´",
    o: "ùî¨",
    p: "ùî≠",
    q: "ùîÆ",
    r: "ùîØ",
    s: "ùî∞",
    t: "ùî±",
    u: "ùî≤",
    v: "ùî≥",
    w: "ùî¥",
    x: "ùîµ",
    y: "ùî∂",
    z: "ùî∑",
    A: "ùîÑ",
    B: "ùîÖ",
    C: "‚Ñ≠",
    D: "ùîá",
    E: "ùîà",
    F: "ùîâ",
    G: "ùîä",
    H: "‚Ñå",
    I: "‚Ñë",
    J: "ùîç",
    K: "ùîé",
    L: "ùîè",
    M: "ùîê",
    N: "ùîë",
    O: "ùîí",
    P: "ùîì",
    Q: "ùîî",
    R: "‚Ñú",
    S: "ùîñ",
    T: "ùîó",
    U: "ùîò",
    V: "ùîô",
    W: "ùîö",
    X: "ùîõ",
    Y: "ùîú",
    Z: "‚Ñ®",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }

  return convertedText
}

function convertToMathBoldItalic(text) {
  let mappings = {
    a: "ùíÇ",
    b: "ùíÉ",
    c: "ùíÑ",
    d: "ùíÖ",
    e: "ùíÜ",
    f: "ùíá",
    g: "ùíà",
    h: "ùíâ",
    i: "ùíä",
    j: "ùíã",
    k: "ùíå",
    l: "ùíç",
    m: "ùíé",
    n: "ùíè",
    o: "ùíê",
    p: "ùíë",
    q: "ùíí",
    r: "ùíì",
    s: "ùíî",
    t: "ùíï",
    u: "ùíñ",
    v: "ùíó",
    w: "ùíò",
    x: "ùíô",
    y: "ùíö",
    z: "ùíõ",
    A: "ùë®",
    B: "ùë©",
    C: "ùë™",
    D: "ùë´",
    E: "ùë¨",
    F: "ùë≠",
    G: "ùëÆ",
    H: "ùëØ",
    I: "ùë∞",
    J: "ùë±",
    K: "ùë≤",
    L: "ùë≥",
    M: "ùë¥",
    N: "ùëµ",
    O: "ùë∂",
    P: "ùë∑",
    Q: "ùë∏",
    R: "ùëπ",
    S: "ùë∫",
    T: "ùëª",
    U: "ùëº",
    V: "ùëΩ",
    W: "ùëæ",
    X: "ùëø",
    Y: "ùíÄ",
    Z: "ùíÅ",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }
  return convertedText
}
function convertToMathBoldScript(text) {
  let mappings = {
    a: "ùì™",
    b: "ùì´",
    c: "ùì¨",
    d: "ùì≠",
    e: "ùìÆ",
    f: "ùìØ",
    g: "ùì∞",
    h: "ùì±",
    i: "ùì≤",
    j: "ùì≥",
    k: "ùì¥",
    l: "ùìµ",
    m: "ùì∂",
    n: "ùì∑",
    o: "ùì∏",
    p: "ùìπ",
    q: "ùì∫",
    r: "ùìª",
    s: "ùìº",
    t: "ùìΩ",
    u: "ùìæ",
    v: "ùìø",
    w: "ùîÄ",
    x: "ùîÅ",
    y: "ùîÇ",
    z: "ùîÉ",
    A: "ùìê",
    B: "ùìë",
    C: "ùìí",
    D: "ùìì",
    E: "ùìî",
    F: "ùìï",
    G: "ùìñ",
    H: "ùìó",
    I: "ùìò",
    J: "ùìô",
    K: "ùìö",
    L: "ùìõ",
    M: "ùìú",
    N: "ùìù",
    O: "ùìû",
    P: "ùìü",
    Q: "ùì†",
    R: "ùì°",
    S: "ùì¢",
    T: "ùì£",
    U: "ùì§",
    V: "ùì•",
    W: "ùì¶",
    X: "ùìß",
    Y: "ùì®",
    Z: "ùì©",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }
  return convertedText
}
function convertToMathDoubleStruck(text) {
  let mappings = {
    a: "ùïí",
    b: "ùïì",
    c: "ùïî",
    d: "ùïï",
    e: "ùïñ",
    f: "ùïó",
    g: "ùïò",
    h: "ùïô",
    i: "ùïö",
    j: "ùïõ",
    k: "ùïú",
    l: "ùïù",
    m: "ùïû",
    n: "ùïü",
    o: "ùï†",
    p: "ùï°",
    q: "ùï¢",
    r: "ùï£",
    s: "ùï§",
    t: "ùï•",
    u: "ùï¶",
    v: "ùïß",
    w: "ùï®",
    x: "ùï©",
    y: "ùï™",
    z: "ùï´",
    A: "ùî∏",
    B: "ùîπ",
    C: "‚ÑÇ",
    D: "ùîª",
    E: "ùîº",
    F: "ùîΩ",
    G: "ùîæ",
    H: "‚Ñç",
    I: "ùïÄ",
    J: "ùïÅ",
    K: "ùïÇ",
    L: "ùïÉ",
    M: "ùïÑ",
    N: "‚Ñï",
    O: "ùïÜ",
    P: "‚Ñô",
    Q: "‚Ñö",
    R: "‚Ñù",
    S: "ùïä",
    T: "ùïã",
    U: "ùïå",
    V: "ùïç",
    W: "ùïé",
    X: "ùïè",
    Y: "ùïê",
    Z: "‚Ñ§",
    0: "ùüò",
    1: "ùüô",
    2: "ùüö",
    3: "ùüõ",
    4: "ùüú",
    5: "ùüù",
    6: "ùüû",
    7: "ùüü",
    8: "ùü†",
    9: "ùü°",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }
  return convertedText
}

function convertToMathSans(text) {
  let mappings = {
    a: "ùñ∫",
    b: "ùñª",
    c: "ùñº",
    d: "ùñΩ",
    e: "ùñæ",
    f: "ùñø",
    g: "ùóÄ",
    h: "ùóÅ",
    i: "ùóÇ",
    j: "ùóÉ",
    k: "ùóÑ",
    l: "ùóÖ",
    m: "ùóÜ",
    n: "ùóá",
    o: "ùóà",
    p: "ùóâ",
    q: "ùóä",
    r: "ùóã",
    s: "ùóå",
    t: "ùóç",
    u: "ùóé",
    v: "ùóè",
    w: "ùóê",
    x: "ùóë",
    y: "ùóí",
    z: "ùóì",
    A: "ùñ†",
    B: "ùñ°",
    C: "ùñ¢",
    D: "ùñ£",
    E: "ùñ§",
    F: "ùñ•",
    G: "ùñ¶",
    H: "ùñß",
    I: "ùñ®",
    J: "ùñ©",
    K: "ùñ™",
    L: "ùñ´",
    M: "ùñ¨",
    N: "ùñ≠",
    O: "ùñÆ",
    P: "ùñØ",
    Q: "ùñ∞",
    R: "ùñ±",
    S: "ùñ≤",
    T: "ùñ≥",
    U: "ùñ¥",
    V: "ùñµ",
    W: "ùñ∂",
    X: "ùñ∑",
    Y: "ùñ∏",
    Z: "ùñπ",
    0: "ùü¢",
    1: "ùü£",
    2: "ùü§",
    3: "ùü•",
    4: "ùü¶",
    5: "ùüß",
    6: "ùü®",
    7: "ùü©",
    8: "ùü™",
    9: "ùü´",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }
  return convertedText
}
function convertToMathSansBold(text) {
  let mappings = {
    a: "ùóÆ",
    b: "ùóØ",
    c: "ùó∞",
    d: "ùó±",
    e: "ùó≤",
    f: "ùó≥",
    g: "ùó¥",
    h: "ùóµ",
    i: "ùó∂",
    j: "ùó∑",
    k: "ùó∏",
    l: "ùóπ",
    m: "ùó∫",
    n: "ùóª",
    o: "ùóº",
    p: "ùóΩ",
    q: "ùóæ",
    r: "ùóø",
    s: "ùòÄ",
    t: "ùòÅ",
    u: "ùòÇ",
    v: "ùòÉ",
    w: "ùòÑ",
    x: "ùòÖ",
    y: "ùòÜ",
    z: "ùòá",
    A: "ùóî",
    B: "ùóï",
    C: "ùóñ",
    D: "ùóó",
    E: "ùóò",
    F: "ùóô",
    G: "ùóö",
    H: "ùóõ",
    I: "ùóú",
    J: "ùóù",
    K: "ùóû",
    L: "ùóü",
    M: "ùó†",
    N: "ùó°",
    O: "ùó¢",
    P: "ùó£",
    Q: "ùó§",
    R: "ùó•",
    S: "ùó¶",
    T: "ùóß",
    U: "ùó®",
    V: "ùó©",
    W: "ùó™",
    X: "ùó´",
    Y: "ùó¨",
    Z: "ùó≠",
    0: "ùü¨",
    1: "ùü≠",
    2: "ùüÆ",
    3: "ùüØ",
    4: "ùü∞",
    5: "ùü±",
    6: "ùü≤",
    7: "ùü≥",
    8: "ùü¥",
    9: "ùüµ",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }
  return convertedText
}
function convertToMathSansBoldItalic(text) {
  let mappings = {
    a: "ùôñ",
    b: "ùôó",
    c: "ùôò",
    d: "ùôô",
    e: "ùôö",
    f: "ùôõ",
    g: "ùôú",
    h: "ùôù",
    i: "ùôû",
    j: "ùôü",
    k: "ùô†",
    l: "ùô°",
    m: "ùô¢",
    n: "ùô£",
    o: "ùô§",
    p: "ùô•",
    q: "ùô¶",
    r: "ùôß",
    s: "ùô®",
    t: "ùô©",
    u: "ùô™",
    v: "ùô´",
    w: "ùô¨",
    x: "ùô≠",
    y: "ùôÆ",
    z: "ùôØ",
    A: "ùòº",
    B: "ùòΩ",
    C: "ùòæ",
    D: "ùòø",
    E: "ùôÄ",
    F: "ùôÅ",
    G: "ùôÇ",
    H: "ùôÉ",
    I: "ùôÑ",
    J: "ùôÖ",
    K: "ùôÜ",
    L: "ùôá",
    M: "ùôà",
    N: "ùôâ",
    O: "ùôä",
    P: "ùôã",
    Q: "ùôå",
    R: "ùôç",
    S: "ùôé",
    T: "ùôè",
    U: "ùôê",
    V: "ùôë",
    W: "ùôí",
    X: "ùôì",
    Y: "ùôî",
    Z: "ùôï",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }
  return convertedText
}
function convertToMathSansItalic(text) {
  let mappings = {
    a: "ùò¢",
    b: "ùò£",
    c: "ùò§",
    d: "ùò•",
    e: "ùò¶",
    f: "ùòß",
    g: "ùò®",
    h: "ùò©",
    i: "ùò™",
    j: "ùò´",
    k: "ùò¨",
    l: "ùò≠",
    m: "ùòÆ",
    n: "ùòØ",
    o: "ùò∞",
    p: "ùò±",
    q: "ùò≤",
    r: "ùò≥",
    s: "ùò¥",
    t: "ùòµ",
    u: "ùò∂",
    v: "ùò∑",
    w: "ùò∏",
    x: "ùòπ",
    y: "ùò∫",
    z: "ùòª",
    A: "ùòà",
    B: "ùòâ",
    C: "ùòä",
    D: "ùòã",
    E: "ùòå",
    F: "ùòç",
    G: "ùòé",
    H: "ùòè",
    I: "ùòê",
    J: "ùòë",
    K: "ùòí",
    L: "ùòì",
    M: "ùòî",
    N: "ùòï",
    O: "ùòñ",
    P: "ùòó",
    Q: "ùòò",
    R: "ùòô",
    S: "ùòö",
    T: "ùòõ",
    U: "ùòú",
    V: "ùòù",
    W: "ùòû",
    X: "ùòü",
    Y: "ùò†",
    Z: "ùò°",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }
  return convertedText
}
function convertToMathScript(text) {
  let mappings = {
    a: "ùí∂",
    b: "ùí∑",
    c: "ùí∏",
    d: "ùíπ",
    e: "‚ÑØ",
    f: "ùíª",
    g: "‚Ñä",
    h: "ùíΩ",
    i: "ùíæ",
    j: "ùíø",
    k: "ùìÄ",
    l: "ùìÅ",
    m: "ùìÇ",
    n: "ùìÉ",
    o: "‚Ñ¥",
    p: "ùìÖ",
    q: "ùìÜ",
    r: "ùìá",
    s: "ùìà",
    t: "ùìâ",
    u: "ùìä",
    v: "ùìã",
    w: "ùìå",
    x: "ùìç",
    y: "ùìé",
    z: "ùìè",
    A: "ùíú",
    B: "‚Ñ¨",
    C: "ùíû",
    D: "ùíü",
    E: "‚Ñ∞",
    F: "‚Ñ±",
    G: "ùí¢",
    H: "‚Ñã",
    I: "‚Ñê",
    J: "ùí•",
    K: "ùí¶",
    L: "‚Ñí",
    M: "‚Ñ≥",
    N: "ùí©",
    O: "ùí™",
    P: "ùí´",
    Q: "ùí¨",
    R: "‚Ñõ",
    S: "ùíÆ",
    T: "ùíØ",
    U: "ùí∞",
    V: "ùí±",
    W: "ùí≤",
    X: "ùí≥",
    Y: "ùí¥",
    Z: "ùíµ",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }
  return convertedText
}
function convertToParenthesized(text) {
  let mappings = {
    a: "‚íú",
    b: "‚íù",
    c: "‚íû",
    d: "‚íü",
    e: "‚í†",
    f: "‚í°",
    g: "‚í¢",
    h: "‚í£",
    i: "‚í§",
    j: "‚í•",
    k: "‚í¶",
    l: "‚íß",
    m: "‚í®",
    n: "‚í©",
    o: "‚í™",
    p: "‚í´",
    q: "‚í¨",
    r: "‚í≠",
    s: "‚íÆ",
    t: "‚íØ",
    u: "‚í∞",
    v: "‚í±",
    w: "‚í≤",
    x: "‚í≥",
    y: "‚í¥",
    z: "‚íµ",
    0: "0",
    1: "‚ë¥",
    2: "‚ëµ",
    3: "‚ë∂",
    4: "‚ë∑",
    5: "‚ë∏",
    6: "‚ëπ",
    7: "‚ë∫",
    8: "‚ëª",
    9: "‚ëº",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let character = text[i].toLowerCase()
    let convertedCharacter =
      mappings[character] !== undefined ? mappings[character] : character
    convertedText += convertedCharacter
  }

  return convertedText
}
function convertToRegionalIndicator(text) {
  let mappings = {
    a: "üá¶",
    b: "üáß",
    c: "üá®",
    d: "üá©",
    e: "üá™",
    f: "üá´",
    g: "üá¨",
    h: "üá≠",
    i: "üáÆ",
    j: "üáØ",
    k: "üá∞",
    l: "üá±",
    m: "üá≤",
    n: "üá≥",
    o: "üá¥",
    p: "üáµ",
    q: "üá∂",
    r: "üá∑",
    s: "üá∏",
    t: "üáπ",
    u: "üá∫",
    v: "üáª",
    w: "üáº",
    x: "üáΩ",
    y: "üáæ",
    z: "üáø",
  }

  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let character = text[i].toLowerCase()
    let convertedCharacter =
      mappings[character] !== undefined ? mappings[character] : character
    convertedText += convertedCharacter
  }
  return convertedText
}

function convertToSquare(text) {
  let mappings = {
    a: "üÑ∞",
    b: "üÑ±",
    c: "üÑ≤",
    d: "üÑ≥",
    e: "üÑ¥",
    f: "üÑµ",
    g: "üÑ∂",
    h: "üÑ∑",
    i: "üÑ∏",
    j: "üÑπ",
    k: "üÑ∫",
    l: "üÑª",
    m: "üÑº",
    n: "üÑΩ",
    o: "üÑæ",
    p: "üÑø",
    q: "üÖÄ",
    r: "üÖÅ",
    s: "üÖÇ",
    t: "üÖÉ",
    u: "üÖÑ",
    v: "üÖÖ",
    w: "üÖÜ",
    x: "üÖá",
    y: "üÖà",
    z: "üÖâ",
    "+": "‚äû",
    "‚äü": "‚äñ",
    "*": "‚ßÜ",
    "/": "‚ßÑ",
  }

  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let character = text[i].toLowerCase()
    let convertedCharacter =
      mappings[character] !== undefined ? mappings[character] : character
    convertedText += convertedCharacter
  }

  return convertedText
}
function convertToFilledSquare(text) {
  let mappings = {
    a: "üÖ∞",
    b: "üÖ±",
    c: "üÖ≤",
    d: "üÖ≥",
    e: "üÖ¥",
    f: "üÖµ",
    g: "üÖ∂",
    h: "üÖ∑",
    i: "üÖ∏",
    j: "üÖπ",
    k: "üÖ∫",
    l: "üÖª",
    m: "üÖº",
    n: "üÖΩ",
    o: "üÖæ",
    p: "üÖø",
    q: "üÜÄ",
    r: "üÜÅ",
    s: "üÜÇ",
    t: "üÜÉ",
    u: "üÜÑ",
    v: "üÜÖ",
    w: "üÜÜ",
    x: "üÜá",
    y: "üÜà",
    z: "üÜâ",
  }

  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let character = text[i].toLowerCase()
    let convertedCharacter =
      mappings[character] !== undefined ? mappings[character] : character
    convertedText += convertedCharacter
  }

  return convertedText
}

function convertToACutePseudoAlphabet(text) {
  let mappings = {
    a: "√°",
    b: "b",
    c: "ƒá",
    d: "d",
    e: "√©",
    f: "f",
    g: "«µ",
    h: "h",
    i: "√≠",
    j: "j",
    k: "·∏±",
    l: "ƒ∫",
    m: "·∏ø",
    n: "≈Ñ",
    o: "≈ë",
    p: "·πï",
    q: "q",
    r: "≈ï",
    s: "≈õ",
    t: "t",
    u: "√∫",
    v: "v",
    w: "·∫É",
    x: "x",
    y: "”≥",
    z: "≈∫",
    A: "√Å",
    B: "B",
    C: "ƒÜ",
    D: "D",
    E: "√â",
    F: "F",
    G: "«¥",
    H: "H",
    I: "√≠",
    J: "J",
    K: "·∏∞",
    L: "ƒπ",
    M: "·∏æ",
    N: "≈É",
    O: "≈ê",
    P: "·πî",
    Q: "Q",
    R: "≈î",
    S: "≈õ",
    T: "T",
    U: "≈∞",
    V: "V",
    W: "·∫Ç",
    X: "X",
    Y: "”≤",
    Z: "≈π",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }
  return convertedText
}
function convertToCJKThaiPseudoAlphabet(text) {
  let mappings = {
    a: "Ôæë",
    b: "‰πÉ",
    c: "c",
    d: "d",
    e: "‰πá",
    f: "ÔΩ∑",
    g: "g",
    h: "„Çì",
    i: "Ôæâ",
    j: "Ôæå",
    k: "„Ç∫",
    l: "Ôæö",
    m: "Ôæ∂",
    n: "ÂàÄ",
    o: "o",
    p: "ÔΩ±",
    q: "q",
    r: "Â∞∫",
    s: "‰∏Ç",
    t: "ÔΩ≤",
    u: "u",
    v: "‚àö",
    w: "w",
    x: "Ôæí",
    y: "Ôæò",
    z: "‰πô",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let character = text[i].toLowerCase()
    let convertedCharacter =
      mappings[character] !== undefined ? mappings[character] : character
    convertedText += convertedCharacter
  }
  return convertedText
}
function convertToCurvy1PseudoAlphabet(text) {
  let mappings = {
    a: "‡∏Ñ",
    b: "‡πí",
    c: "∆à",
    d: "…ó",
    e: "Ôªâ",
    f: ",‡§ø",
    g: "Ôª≠",
    h: "…¶",
    i: "Ÿ±",
    j: "Ôªù",
    k: "·õï",
    l: "…≠",
    m: "‡πì",
    n: "‡∏Å",
    o: "—ª",
    p: "œÅ",
    q: "€π",
    r: "…º",
    s: "‡∏£",
    t: "’á",
    u: "‡™™",
    v: "€∑",
    w: "‡∏ù",
    x: "‡∏ã",
    y: "◊•",
    z: "’π",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let character = text[i].toLowerCase()
    let convertedCharacter =
      mappings[character] !== undefined ? mappings[character] : character
    convertedText += convertedCharacter
  }
  return convertedText
}
function convertToCurvy2PseudoAlphabet(text) {
  let mappings = {
    a: "Œ±",
    b: "–≤",
    c: "¬¢",
    d: "‚àÇ",
    e: "—î",
    f: "∆í",
    g: "Ôª≠",
    h: "–Ω",
    i: "Œπ",
    j: "◊†",
    k: "–∫",
    l: "‚Ñì",
    m: "–º",
    n: "Œ∑",
    o: "œÉ",
    p: "œÅ",
    q: "€π",
    r: "—è",
    s: "—ï",
    t: "—Ç",
    u: "œÖ",
    v: "ŒΩ",
    w: "œâ",
    x: "œá",
    y: "—É",
    z: "’π",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let character = text[i].toLowerCase()
    let convertedCharacter =
      mappings[character] !== undefined ? mappings[character] : character
    convertedText += convertedCharacter
  }
  return convertedText
}
function convertToCurvy3PseudoAlphabet(text) {
  let mappings = {
    a: "‡∏Ñ",
    b: "‡πí",
    c: "œÇ",
    d: "‡πî",
    e: "—î",
    f: "≈¶",
    g: "ÔªÆ",
    h: "—í",
    i: "‡πÄ",
    j: "◊ü",
    k: "–∫",
    l: "…≠",
    m: "‡πì",
    n: "‡∏†",
    o: "‡πè",
    p: "◊ß",
    q: "·ª£",
    r: "–≥",
    s: "‡∏£",
    t: "’á",
    u: "‡∏¢",
    v: "◊©",
    w: "‡∏¨",
    x: "◊ê",
    y: "◊•",
    z: "’π",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let character = text[i].toLowerCase()
    let convertedCharacter =
      mappings[character] !== undefined ? mappings[character] : character
    convertedText += convertedCharacter
  }
  return convertedText
}

function convertToFauxCyrillicPseudoAlphabet(text) {
  let mappings = {
    a: "–∞",
    b: "—ä",
    c: "—Å",
    d: "‚ÜÅ",
    e: "—ç",
    f: "f",
    g: "–ë",
    h: "–Ç",
    i: "—ñ",
    j: "—ò",
    k: "–∫",
    l: "l",
    m: "–º",
    n: "–∏",
    o: "–æ",
    p: "—Ä",
    q: "q",
    r: "—ì",
    s: "—ï",
    t: "—Ç",
    u: "—Ü",
    v: "v",
    w: "—à",
    x: "—Ö",
    y: "–é",
    z: "z",
    A: "–î",
    B: "–ë",
    C: "“Ä",
    D: "‚ÜÅ",
    E: "–Ñ",
    F: "F",
    G: "–ë",
    H: "–ù",
    I: "–Ü",
    J: "–à",
    K: "–å",
    L: "L",
    M: "–ú",
    N: "–ò",
    O: "–§",
    P: "–†",
    Q: "Q",
    R: "–Ø",
    S: "–Ö",
    T: "–ì",
    U: "–¶",
    V: "V",
    W: "–©",
    X: "–ñ",
    Y: "–ß",
    Z: "Z",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }

  return convertedText
}
function convertToFauxEthiopicPseudoAlphabet(text) {
  let mappings = {
    a: "·àç",
    b: "·åå",
    c: "·à≠",
    d: "·ãï",
    e: "·âø",
    f: "·âª",
    g: "·äó",
    h: "·ãò",
    i: "·åé",
    j: "·åã",
    k: "·åï",
    l: "·à®",
    m: "·å†",
    n: "·ä≠",
    o: "·ãê",
    p: "·ã®",
    q: "·ãí",
    r: "·ã™",
    s: "·äê",
    t: "·çï",
    u: "·àÅ",
    v: "·àÄ",
    w: "·à†",
    x: "·à∏",
    y: "·àÉ",
    z: "·åä",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let character = text[i].toLowerCase()
    let convertedCharacter =
      mappings[character] !== undefined ? mappings[character] : character
    convertedText += convertedCharacter
  }
  return convertedText
}
function convertToRockDotsPseudoAlphabet(text) {
  let mappings = {
    a: "√§",
    b: "·∏Ö",
    c: "ƒã",
    d: "·∏ã",
    e: "√´",
    f: "·∏ü",
    g: "ƒ°",
    h: "·∏ß",
    i: "√Ø",
    j: "j",
    k: "·∏≥",
    l: "·∏∑",
    m: "·πÅ",
    n: "·πÖ",
    o: "√∂",
    p: "·πó",
    q: "q",
    r: "·πõ",
    s: "·π°",
    t: "·∫ó",
    u: "√º",
    v: "·πø",
    w: "·∫Ö",
    x: "·∫ç",
    y: "√ø",
    z: "≈º",
    A: "√Ñ",
    B: "·∏Ñ",
    C: "ƒä",
    D: "·∏ä",
    E: "–Å",
    F: "·∏û",
    G: "ƒ†",
    H: "·∏¶",
    I: "–á",
    J: "J",
    K: "·∏≤",
    L: "·∏∂",
    M: "·πÄ",
    N: "·πÑ",
    O: "√ñ",
    P: "·πñ",
    Q: "Q",
    R: "·πö",
    S: "·π†",
    T: "·π™",
    U: "√ú",
    V: "·πæ",
    W: "·∫Ñ",
    X: "·∫å",
    Y: "≈∏",
    Z: "≈ª",
    3: "”ü",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }

  return convertedText
}
function convertToSmallCapsPseudoAlphabet(text) {
  let mappings = {
    a: "·¥Ä",
    b: " ô",
    c: "·¥Ñ",
    d: "·¥Ö",
    e: "·¥á",
    f: "Íú∞",
    g: "…¢",
    h: " ú",
    i: "…™",
    j: "·¥ä",
    k: "·¥ã",
    l: " ü",
    m: "·¥ç",
    n: "…¥",
    o: "·¥è",
    p: "·¥©",
    q: "q",
    r: " Ä",
    s: "Íú±",
    t: "·¥õ",
    u: "·¥ú",
    v: "·¥†",
    w: "·¥°",
    x: "x",
    y: "y",
    z: "·¥¢",
    A: "·¥Ä",
    B: " ô",
    C: "·¥Ñ",
    D: "·¥Ö",
    E: "·¥á",
    F: "Íú∞",
    G: "…¢",
    H: " ú",
    I: "…™",
    J: "·¥ä",
    K: "·¥ã",
    L: " ü",
    M: "·¥ç",
    N: "…¥",
    O: "·¥è",
    P: "·¥©",
    Q: "Q",
    R: " Ä",
    S: "Íú±",
    T: "·¥õ",
    U: "·¥ú",
    V: "·¥†",
    W: "·¥°",
    X: "x",
    Y: "Y",
    Z: "·¥¢",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }

  return convertedText
}

function convertToStrokedPseudoAlphabet(text) {
  let mappings = {
    a: "»∫",
    b: "∆Ä",
    c: "»º",
    d: "ƒë",
    e: "…á",
    f: "f",
    g: "«•",
    h: "ƒß",
    i: "…®",
    j: "…â",
    k: "ÍùÅ",
    l: "≈Ç",
    m: "m",
    n: "n",
    o: "√∏",
    p: "·µΩ",
    q: "Íùó",
    r: "…ç",
    s: "s",
    t: "≈ß",
    u: "·µæ",
    v: "v",
    w: "w",
    x: "x",
    y: "…è",
    z: "∆∂",
    A: "»∫",
    B: "…É",
    C: "»ª",
    D: "ƒê",
    E: "…Ü",
    F: "F",
    G: "«§",
    H: "ƒ¶",
    I: "∆ó",
    J: "…à",
    K: "ÍùÄ",
    L: "≈Å",
    M: "M",
    N: "N",
    O: "√ò",
    P: "‚±£",
    Q: "Íùñ",
    R: "…å",
    S: "S",
    T: "≈¶",
    U: "·µæ",
    V: "V",
    W: "W",
    X: "X",
    Y: "…é",
    Z: "∆µ",
    2: "∆ª",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }

  return convertedText
}
function convertToSubscriptPseudoAlphabet(text) {
  let mappings = {
    a: "‚Çê",
    b: "·µ¶",
    c: "ÍúÄ",
    d: "d",
    e: "‚Çë",
    f: "f",
    g: "‚Çâ",
    h: "‚Çï",
    i: "·µ¢",
    j: "‚±º",
    k: "‚Çñ",
    l: "‚Çó",
    m: "‚Çò",
    n: "‚Çô",
    o: "‚Çí",
    p: "‚Çö",
    q: "q",
    r: "·µ£",
    s: "‚Çõ",
    t: "‚Çú",
    u: "·µ§",
    v: "·µ•",
    w: "w",
    x: "‚Çì",
    y: "·µß",
    z: "‚ÇÇ",
    0: "‚ÇÄ",
    1: "‚ÇÅ",
    2: "‚ÇÇ",
    3: "‚ÇÉ",
    4: "‚ÇÑ",
    5: "‚ÇÖ",
    6: "‚ÇÜ",
    7: "‚Çá",
    8: "‚Çà",
    9: "‚Çâ",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let character = text[i].toLowerCase()
    let convertedCharacter =
      mappings[character] !== undefined ? mappings[character] : character
    convertedText += convertedCharacter
  }

  return convertedText
}
function convertToSuperscriptPseudoAlphabet(text) {
  let mappings = {
    a: "·µÉ",
    b: "·µá",
    c: "·∂ú",
    d: "·µà",
    e: "·µâ",
    f: "·∂†",
    g: "·µç",
    h: " ∞",
    i: "‚Å±",
    j: " ≤",
    k: "·µè",
    l: "À°",
    m: "·µê",
    n: "‚Åø",
    o: "·µí",
    p: "·µñ",
    q: "q",
    r: " ≥",
    s: "À¢",
    t: "·µó",
    u: "·µò",
    v: "·µõ",
    w: " ∑",
    x: "À£",
    y: " ∏",
    z: "·∂ª",
    A: "·¥¨",
    B: "·¥Æ",
    C: "·∂ú",
    D: "·¥∞",
    E: "·¥±",
    F: "·∂†",
    G: "·¥≥",
    H: "·¥¥",
    I: "·¥µ",
    J: "·¥∂",
    K: "·¥∑",
    L: "·¥∏",
    M: "·¥π",
    N: "·¥∫",
    O: "·¥º",
    P: "·¥æ",
    Q: "Q",
    R: "·¥ø",
    S: "À¢",
    T: "·µÄ",
    U: "·µÅ",
    V: "‚±Ω",
    W: "·µÇ",
    X: "À£",
    Y: " ∏",
    Z: "·∂ª",
    0: "‚Å∞",
    1: "¬π",
    2: "¬≤",
    3: "¬≥",
    4: "‚Å¥",
    5: "‚Åµ",
    6: "‚Å∂",
    7: "‚Å∑",
    8: "‚Å∏",
    9: "‚Åπ",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }

  return convertedText
}
function convertToInvertedPseudoAlphabet(text) {
  let mappings = {
    a: "…ê",
    b: "q",
    c: "…î",
    d: "p",
    e: "«ù",
    f: "…ü",
    g: "∆É",
    h: "…•",
    i: "ƒ±",
    j: "…æ",
    k: " û",
    l: "◊ü",
    m: "…Ø",
    n: "u",
    o: "o",
    p: "d",
    q: "b",
    r: "…π",
    s: "s",
    t: " á",
    u: "n",
    v: " å",
    w: " ç",
    x: "x",
    y: " é",
    z: "z",
    A: "ÍìØ",
    B: "Íì≠",
    C: "‚ÜÉ",
    D: "Íì∑",
    E: "∆é",
    F: "‚Ñ≤",
    G: "‚ÖÅ",
    H: "…•",
    I: "ƒ±",
    J: "·íã",
    K: "Íìò",
    L: "‚ÖÇ",
    M: "W",
    N: "u",
    O: "O",
    P: "Íìí",
    Q: "√í",
    R: "Íì§",
    S: "S",
    T: "Íìï",
    U: "Íìµ",
    V: "êå°",
    W: "M",
    X: "X",
    Y: "‚ÖÑ",
    Z: "Z",
    4: "“∫",
    1: "∆ñ",
    ";": "‚∏µ",
    "&": "‚Öã",
    "(": ")",
    5: "Íûî",
    6: "9",
    7: "‚à†",
    ")": "(",
    9: "6",
    "{": "}",
    "}": "{",
    "]": "[",
    "[": "]",
    "!": "¬°",
    "\\": "/",
    "/": "\\",
    "?": "¬ø",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }

  return convertedText
}
function convertToReversedPseudoAlphabet(text) {
  let mappings = {
    b: "d",
    c: "‚ÜÑ",
    d: "b",
    e: "…ò",
    f: "Íüª",
    n: "·¥é",
    o: "o",
    p: "q",
    q: "p",
    r: "·¥ô",
    s: "ÍôÖ",
    B: "d",
    C: "‚ÜÉ",
    D: "b",
    E: "∆é",
    F: "Íüª",
    L: "‚ÖÉ",
    N: "·¥é",
    O: "O",
    P: "Íüº",
    Q: "p",
    R: "·¥ô",
    S: "ÍôÑ",
    Y: "‚ÖÑ",
    Z: "Z",
    ";": "‚Åè",
    "?": "‚∏Æ",
    a: "A",
  }
  let convertedText = ""
  for (let i = 0; i < text.length; i++) {
    let char = text[i]
    if (mappings[char]) {
      convertedText += mappings[char]
    } else {
      convertedText += char
    }
  }

  return convertedText
}
